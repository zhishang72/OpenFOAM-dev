#!/bin/sh
#---------------------------------*- sh -*-------------------------------------
# =========                 |
# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
#  \\    /   O peration     | Website:  https://openfoam.org
#   \\  /    A nd           | Copyright (C) 2011-2024 OpenFOAM Foundation
#    \\/     M anipulation  |
#------------------------------------------------------------------------------
# License
#     This file is part of OpenFOAM.
#
#     OpenFOAM is free software: you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# Script
#     foamConfigurePaths
#
# Description
#     Hard-code installation directories
#
#------------------------------------------------------------------------------
usage() {
    exec 1>&2
    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
    cat<<USAGE

usage: ${0##*/}
  --foamInstall dir             specify installation directory (e.g. /opt)
  --projectName name            specify project name (e.g. openfoam11)
  --thirdPartyName name         specify third-party name (e.g. openfoam11/thirdparty)
  --projectVersion ver          specify project version (e.g. 11)
  --archOption arch             specify architecture option (only 32 or 64 applicable)
  --dependency name:type:ver    specify dependency (e.g. SCOTCH=ThirdParty:6.0.9)

USAGE
    exit 1
}


# Function to do replacement on file. Checks if any replacement has been done.
# _inlineSed <file> <regexp> <replacement> <msg>
_inlineSed()
{
    file="$1"

    [ -f "$file" ] || {
        echo "Missing file: $file"
        exit 1
    }

    regexp="$2"
    replacement="$3"
    msg="$4"

    cmd='/^[^#]/s@'"$regexp"'@'"$replacement"'@'

    grep -q "$regexp" "$file" && sed -i -e "$cmd" "$file" || \
        (echo "Failed: $msg in $file" && exit 1)

    echo "Okay: $msg in $file"

    return 0
}


[ -d etc ] || usage "Please run from top-level directory of installation"

unset foamInstDir projectName thirdPartyName projectVersion archOption
unset paraviewType paraviewVersion

# Parse options
while [ "$#" -gt 0 ]
do
    case "$1" in
    -h | -help | --help)
        usage
        ;;
    -foamInstall | --foamInstall)
        [ "$#" -ge 2 ] || usage "'$1' option requires an argument"
        foamInstDir="$2"
        # Replace FOAM_INST_DIR=...
        _inlineSed \
            etc/bashrc \
            'export FOAM_INST_DIR=.*' \
            'export FOAM_INST_DIR='"$foamInstDir" \
            "Setting FOAM_INST_DIR to '$foamInstDir'"
        _inlineSed \
            etc/cshrc \
            'setenv FOAM_INST_DIR .*' \
            'setenv FOAM_INST_DIR '"$foamInstDir" \
            "Setting FOAM_INST_DIR to '$foamInstDir'"
        shift 2
        ;;
   -projectName | --projectName)
        [ "$#" -ge 2 ] || usage "'$1' option requires an argument"
        projectName="$2"
        # replace WM_PROJECT_DIR=...
        _inlineSed \
            etc/bashrc \
            'export WM_PROJECT_DIR=.*' \
            'export WM_PROJECT_DIR=$WM_PROJECT_INST_DIR/'"$projectName" \
            "Replacing WM_PROJECT_DIR setting by $projectName"
        _inlineSed \
            etc/cshrc \
            'setenv WM_PROJECT_DIR .*' \
            'setenv WM_PROJECT_DIR $WM_PROJECT_INST_DIR/'"$projectName" \
            "Replacing WM_PROJECT_DIR setting by $projectName"
        shift 2
        ;;
   -thirdPartyName | --thirdPartyName)
        [ "$#" -ge 2 ] || usage "'$1' option requires an argument"
        thirdPartyName="$2"
        # replace WM_PROJECT_DIR=...
        _inlineSed \
            etc/bashrc \
            'export WM_THIRD_PARTY_DIR=.*' \
            'export WM_THIRD_PARTY_DIR=$WM_PROJECT_INST_DIR/'"$thirdPartyName" \
            "Replacing WM_THIRD_PARTY_DIR setting by $thirdPartyName"
        _inlineSed \
            etc/cshrc \
            'setenv WM_THIRD_PARTY_DIR .*' \
            'setenv WM_THIRD_PARTY_DIR $WM_PROJECT_INST_DIR/'"$thirdPartyName" \
            "Replacing WM_THIRD_PARTY_DIR setting by $thirdPartyName"
        shift 2
        ;;
   --projectVersion)
        [ "$#" -ge 2 ] || usage "'$1' option requires an argument"
        projectVersion="$2"
        # replace WM_PROJECT_VERSION=...
        echo "Replacing WM_PROJECT_VERSION setting by $projectVersion"
        _inlineSed \
            etc/bashrc \
            'export WM_PROJECT_VERSION=.*' \
            'export WM_PROJECT_VERSION='"$projectVersion" \
            "Replacing WM_PROJECT_VERSION setting by $projectVersion"
        _inlineSed \
            etc/cshrc \
            'setenv WM_PROJECT_VERSION .*' \
            'setenv WM_PROJECT_VERSION '"$projectVersion" \
            "Replacing WM_PROJECT_VERSION setting by $projectVersion"
        shift 2
        ;;
    -archOption | --archOption)
        [ "$#" -ge 2 ] || usage "'$1' option requires an argument"
        archOption="$2"
        # replace WM_ARCH_OPTION=...
        _inlineSed \
            etc/bashrc \
            'export WM_ARCH_OPTION=.*' \
            'export WM_ARCH_OPTION='"$archOption" \
            "Replacing WM_ARCH_OPTION setting by '$archOption'"
        _inlineSed \
            etc/cshrc \
            'setenv WM_ARCH_OPTION .*' \
            'setenv WM_ARCH_OPTION '"$archOption" \
            "Replacing WM_ARCH_OPTION setting by '$archOption'"
        shift 2
        ;;

    -dependency | --dependency)
        [ "$#" -ge 2 ] || usage "'$1' option requires an argument"
        dependencyNameTypeVersion=$2
        dependencyNameType=${dependencyNameTypeVersion%:*}
        dependencyName=${dependencyNameType%=*}
        dependencyVersion=${dependencyNameTypeVersion#$dependencyNameType*}
        dependencyVersion=${dependencyVersion#:}
        dependencyType=${dependencyNameType#$dependencyName*}
        dependencyType=${dependencyType#=}
        # replace ${dependencyName}_TYPE...
        if [ -n "$dependencyType" ]
        then
            _inlineSed \
                etc/bashrc \
                'export '"$dependencyName"'_TYPE=.*' \
                'export '"$dependencyName"'_TYPE='"$dependencyType" \
                "Replacing ${dependencyName}_TYPE setting by '$dependencyType'"
            _inlineSed \
                etc/cshrc \
                'setenv '"$dependencyName"'_TYPE .*' \
                'setenv '"$dependencyName"'_TYPE '"$dependencyType" \
                "Replacing ${dependencyName}_TYPE setting by '$dependencyType'"
        fi
        # add/replace ${dependencyName}_VERSION...
        if [ -n "$dependencyVersion" ]
        then
            sed -i '/export '"$dependencyName"'_VERSION=.*/d' etc/bashrc
            _inlineSed \
                etc/bashrc \
                '\(export '"$dependencyName"'_TYPE=.*\)' \
                '\1\nexport '"$dependencyName"'_VERSION='"$dependencyVersion" \
                "Adding ${dependencyName}_VERSION setting '$dependencyVersion'"
            sed -i '/setenv '"$dependencyName"'_VERSION .*/d' etc/cshrc
            _inlineSed \
                etc/cshrc \
                '\(setenv '"$dependencyName"'_TYPE .*\)' \
                '\1\nsetenv '"$dependencyName"'_VERSION '"$dependencyVersion" \
                "Adding ${dependencyName}_VERSION setting '$dependencyVersion'"
        fi
        shift 2
        ;;
    *)
        usage "unknown option/argument: '$*'"
        ;;
    esac
done

[ -n "$foamInstDir" -o -n "$projectName" -o -n "$thirdPartyName" \
-o -n "$projectVersion" -o -n "$archOption" \
-o -n "$dependencyNameTypeVersion" \
] || usage "Please specify at least one configure option"

#------------------------------------------------------------------------------
